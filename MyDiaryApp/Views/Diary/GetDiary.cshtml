
@{
    ViewBag.Title = "GetDiary";
    Layout = "~/Views/Shared/_MyLayout.cshtml";
}

@**@

<style>
    .createBtn {
        font-size:1.5rem;
        font-weight:bolder;
        height: 40px;
    }
    .comfirmBtn{
        position:fixed;
        width:60px !important;
        right:40px;
        bottom:40px;
    }
    .transactionTable {
        opacity: 0;
        visibility: hidden;
    }

    .transactionTable.visible {
        opacity: 1;
        visibility: visible;
    }

    input,textarea {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        transition: transform 0.3s ease, box-shadow 0.3s ease; 
    }

        input:focus, textarea:focus {
            transform: scale(1.05);
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            border-color: #578E7E;
        }
</style>

<div>
    <h2 class="title text-center">@Model.Date.ToString("yyyy 年 MM 月 dd 日")</h2>
</div>


<form method="post" action="@Url.Action("SaveDiary", "Diary")" class="form-inline text-center ">
    <input type="hidden" name="date" value="@Model.Date.ToString("yyyy-MM-dd")" />

    <div class="textContent ">
        <label for="Content" class="labelTitle">- 今日記事 -</label>
        <textarea type="text" id="Content" name="Content" rows="5" class="text-center">@Model.Content</textarea>
    </div>

    <table class=" table table-bordered transactionTable visible">
        <thead class="week">
            <tr>
                <th>類型</th>
                <th>金額</th>
                <th>描述</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            <!-- 已存在的收支紀錄 -->
            @for (int i = 0; i < Model.Transactions.Count; i++)
            {
                var transaction = Model.Transactions[i];
                <tr>
                    <td>
                        <select name="Transactions[@i].Type" class="form-control type">
                            <option value="收入" @(transaction.Type == "收入" ? "selected" : "")>收入</option>
                            <option value="支出" @(transaction.Type == "支出" ? "selected" : "")>支出</option>
                        </select>
                    </td>
                    <td>
                        <input type="number" step="1" name="Transactions[@i].Amount" value="@transaction.Amount" class="form-control amount" />
                    </td>
                    <td>
                        <input type="text" name="Transactions[@i].Description" value="@transaction.Description" class="form-control desc" />
                    </td>
                    <td>
                        <button class="btn deleteBtn">刪除</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

</form>

<div class="text-center">
    <!-- 新增一筆收支紀錄 -->
    <button class="btn createBtn ">- 新增紀錄 -</button>
</div>


<div class="text-right">
    <button class="btn comfirmBtn">儲存</button>
</div>



@section scripts{
    <script>
        document.addEventListener("DOMContentLoaded", function () {

            document.querySelector("#prevPage").addEventListener("click", () => {
                var targetUrl = '@Url.Action("GetCalendar", "Diary")';
                window.location.href = targetUrl;
            });

            const transactionTable = document.querySelector(".transactionTable");
            const createBtn = document.querySelector(".createBtn");
            const comfirmBtn = document.querySelector(".comfirmBtn");

            createBtn.addEventListener("click", () => {
                const newTs = document.createElement("tr");
                const TsCount = transactionTable.querySelectorAll("tbody tr").length;
                newTs.innerHTML = `<td>
                        <select name="Transactions[${TsCount}].Type" class="form-control">
                            <option value="收入">收入</option>
                            <option value="支出">支出</option>
                        </select>
                    </td>
                    <td>
                        <input type="number" step="1" name="Transactions[${TsCount}].Amount" value="0" class="form-control" />
                    </td>
                    <td>
                        <input type="text" name="Transactions[${TsCount}]].Description" value="" class="form-control" />
                    </td>
                    <td>
                        <button class="btn deleteBtn">刪除</button>
                    </td>`;
                transactionTable.querySelector("tbody").appendChild(newTs);

                newTs.classList.add("fade-in")

                bindDeleteEvent(newTs.querySelector(".deleteBtn"))

                checkTsTable();
            })

            function bindDeleteEvent(button) {
                button.addEventListener("click", () => {
                    button.closest("tr").remove();
                    checkTsTable();
                })
            }

            function checkTsTable() {
                const row = document.querySelectorAll("tbody tr");
                if (row.length === 0) {
                    transactionTable.classList.remove("visible")
                }
                else {
                    transactionTable.classList.add("visible")
                }
            }

            checkTsTable();

            document.querySelectorAll(".deleteBtn").forEach(bindDeleteEvent);

            //處理日記更新功能
            const form = document.querySelector("form");

            form.addEventListener("submit", (event) => {
                event.preventDefault(); //處理form默認提交
            });

            comfirmBtn.addEventListener("click", () => {
                const diaryDate = "@Model.Date.ToString("yyyy-MM-dd")";
                const diaryContent = document.querySelector("#Content").value;
                const transations = Array.from(transactionTable.querySelectorAll("tbody tr")).map(row => ({
                    Type: row.querySelector(".type").value,
                    Amount: row.querySelector(".amount").value,
                    Description: row.querySelector(".desc").value,
                }));

                fetch("SaveDiary", {
                    method: "POST",
                    headers: { "Content-Type": "application/Json" },
                    body: JSON.stringify({
                        Date: diaryDate,
                        Content: diaryContent,
                        Transactions: transations,
                    }),
                })
                    .then(response => {
                        if (response.ok) {
                            alert("日記更新完成!");
                            location.reload();
                        }
                        else {
                            console.error("日記更新失敗")
                        }
                    })
                    .catch(error => console.error("更新日記發生錯誤", error));
            });
        });
    </script>
}